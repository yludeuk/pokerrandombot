# -*- coding: utf-8 -*-
import os
from datetime import datetime

import telebot
import random
from flask import Flask, request
from pymongo import MongoClient

token = os.environ['POKER_RANDOM_TOKEN']
bot = telebot.TeleBot(token)

server = Flask(__name__)


client = MongoClient(os.environ['MONGO_URL'], 63367)
db = client[os.environ['MONGODB']]
db.authenticate(os.environ['MONGO_USER'], os.environ['MONGO_PASSWORD'])
players_collection = db['lepers']

@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    result = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ç–æ—Ä–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ –≤ –ø–æ–∫–µ—Ä!\r\n–Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:"
    result += "\r\n/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    result += "\r\n/setplayers <—Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∂–µ—Ä–µ–±—å–µ–≤–∫–∏ (–≤–≤–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)"
    result += "\r\n/getplayers - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫"
    result += "\r\n/randomize <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤> - –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
    result += "\r\n/help - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    bot.send_message(message.chat.id, result)


@bot.message_handler(commands=['randomize'])
def handle_randomize(message):
    chat_id = message.chat.id
    username = message.from_user.username if message.from_user.username else ''
    bound_to = message.chat.title if message.chat.type == 'group' else username
    players_by_group = {players_group['chat_id']: players_group for players_group in players_collection.find({})}
    if chat_id not in players_by_group:
        new_element = {'chat_id': message.chat.id,
                       'bound_to': bound_to,
                       'last_edit_date': datetime.fromtimestamp(message.date),
                       'last_edited_by': username,
                       'members': [],
                       'number': 0}
        players_by_group[chat_id] = new_element
        players_collection.insert_one(new_element)

    msg = message.text[len('/randomize'):]
    if msg.startswith('@'):
        if msg.startswith('@PokerRandomBot ') or msg == '@PokerRandomBot':
            msg = msg[len('@PokerRandomBot '):]
        else:
            msg = '0'
    members = players_by_group[message.chat.id]['members']
    if len(members) == 0:
        bot.send_message(message.chat.id, '–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –Ø –Ω–µ —Å–º–æ–≥—É –Ω–∏—á–µ–≥–æ –Ω–∞—Ä–∞–Ω–¥–æ–º–∏—Ç—å.')
        return
    if not msg:
        number = players_by_group[message.chat.id]['number']
        if not number:
            bot.send_message(message.chat.id, '–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.')
            return
    else:
        try:
            number = int(msg)
        except:
            bot.send_message(message.chat.id, '–ß—Ç–æ —ç—Ç–æ –∑–∞ —á–∏—Å–ª–æ? –ù–µ –ø–æ–π–º—É.')
            return
        if not number:
            bot.send_message(message.chat.id, '–ù—É –Ω–µ—Ç, —Ç–∞–∫ –Ω–µ–ª—å–∑—è.')
            return
    new_values = {
        'last_edit_date': datetime.fromtimestamp(message.date),
        'last_edited_by': username,
        'number': number
    }
    players_collection.update_one({'chat_id': chat_id}, {'$set': new_values}, upsert=False)
    members = [member for member in members if member]
    if len(members) < number:
        bot.send_message(message.chat.id, '–ü–æ–∑–≤–æ–ª—å—Ç–µ, –Ω–æ —è –Ω–µ –º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å %s –∏–∑ %s.' % (number, len(members)))
        return
    players = random.sample(members, number)
    losers = set(members).difference(players)
    players = [player for player in members if player in players]
    players_enumerated = ['%s. %s' % (i + 1, player) for i, player in enumerate(players)]
    result = '–†–∞–Ω–¥–æ–º –≤—ã–±—Ä–∞–ª —Å–ª–µ–¥—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤:\r\n%s' % '\r\n'.join(players_enumerated)
    result += '\r\n–ü–æ–∑–¥—Ä–∞–≤–∏–º —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–æ–≤!üåü'
    if len(losers) > 0:
        losers = [player for player in members if player in losers]
        players_enumerated = ['%s. %s' % (i + 1, player) for i, player in enumerate(losers)]
        result += '\r\n\r\n–ñ–¥—É—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–Ω—Å–∞:\r\n%s' % '\r\n'.join(players_enumerated)
    bot.send_message(message.chat.id, result)


@bot.message_handler(commands=['setplayers'])
def handle_set_players(message):
    chat_id = message.chat.id
    username = message.from_user.username if message.from_user.username else ''
    bound_to = message.chat.title if message.chat.type == 'group' else username
    players_by_group = {players_group['chat_id']: players_group for players_group in players_collection.find({})}
    if chat_id not in players_by_group:
        new_element = {'chat_id': message.chat.id,
                       'bound_to': bound_to,
                       'last_edit_date': datetime.fromtimestamp(message.date),
                       'last_edited_by': username,
                       'members': [],
                       'number': 0}
        players_collection.insert_one(new_element)

    msg = message.text[len('/setplayers'):]
    if msg.startswith('@'):
        if msg.startswith('@PokerRandomBot ') or msg == '@PokerRandomBot':
            msg = msg[len('@PokerRandomBot '):]
        else:
            bot.send_message(message.chat.id, '–ù–µ–ø–æ–Ω—è—Ç–Ω–æ. –î–∞–≤–∞–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            return
    else:
        msg = msg[1:]
    if not msg:
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.')
        return
    players = msg.split(' ')
    players_copy = players
    players = []
    for player in players_copy:
        if player not in players:
            players.append(player)
    if len(players) > 100:
        bot.send_message(message.chat.id, '–í–∞—Å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ! –î–∞–π—Ç–µ –º–Ω–µ –ø–æ–º–µ–Ω—å—à–µ –ª—é–¥–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')
        return
    if max([len(player) for player in players]) > 32:
        bot.send_message(message.chat.id, '–ö–∞–∂–µ—Ç—Å—è, —É –∫–æ–≥–æ-—Ç–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...')
        return
    new_values = {
        'last_edit_date': datetime.fromtimestamp(message.date),
        'last_edited_by': username,
        'members': players
    }
    players_collection.update_one({'chat_id': chat_id}, {'$set': new_values}, upsert=False)
    bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ! –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.')


@bot.message_handler(commands=['getplayers'])
def handle_get_players(message):
    players_by_group = {players_group['chat_id']: players_group for players_group in players_collection.find({})}
    if message.chat.id not in players_by_group:
        username = message.from_user.username if message.from_user.username else ''
        bound_to = message.chat.title if message.chat.type == 'group' else username
        new_element = {'chat_id': message.chat.id,
                       'bound_to': bound_to,
                       'last_edit_date': datetime.fromtimestamp(message.date),
                       'last_edited_by': username,
                       'members': [],
                       'number': 0}
        players_by_group[message.chat.id] = new_element
        players_collection.insert_one(new_element)
    players = players_by_group[message.chat.id]['members']
    if len(players) == 0:
        result = '–í –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç'
    else:
        players_enumerated = ['%s. %s' % (i + 1, player) for i, player in enumerate(players)]
        result = '–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫:\r\n%s' % '\r\n'.join(players_enumerated)
    bot.send_message(message.chat.id, result)


@server.route('/%s' % token, methods=['POST'])
def getMessage():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "!", 200

@server.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url=os.environ['POKER_HEROKU_URL'] + token)
    return "!", 200

port = int(os.environ.get('PORT', 5000))
server.run(host="0.0.0.0", port=port)